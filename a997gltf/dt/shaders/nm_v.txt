//#version 320 es
precision lowp float;
uniform mat4 uMVP; // transform matrix (Model-View-Projection)
uniform mat3 uMV3x3; // Model-View matrix (for calculating normals into eye space)
uniform mat4 uMM; // Model matrix (for vHalfVector for glares)
layout (location = 0) in vec3 aPos; // position attribute (x,y,z)
layout (location = 3) in vec3 aNormal; // normal attribute (x,y,z)
//normal map
layout (location = 4) in vec3 aTangent;
layout (location = 5) in vec3 aBinormal;
layout (location = 2) in vec2 aTuv2; //attribute TUV2 (texture coordinates)
out vec2 vTuv2; //varying TUV2 (pass to fragment shader)
uniform vec3 uVectorToLight;
uniform vec3 uCameraPosition; //for calculating half vector for glares
uniform float uSpecularIntencity; //for calculating half vector for glares

out vec3 tbnVectorToLight;
out vec3 tbnHalfVector;
#if defined(MIRROR)
	out vec2 vScreenPosition01;
	out mat3 inversedTBN;
#endif
#if defined(USE_TUV0)
	layout (location = 1) in vec2 aTuv; //attribute TUV (texture coordinates)
	out vec2 vTuv; //varying TUV (pass to fragment shader)
#endif
#if defined(WITHSHADOWS)
	uniform mat4 uMVP4dm; // transform matrix (Model-View-Projection) for depth map
	out vec3 vDMcoords; //depth map coords
#endif

void main(void) { 
	gl_Position = uMVP * vec4(aPos, 1.0);
#if defined(USE_TUV0)
	vTuv = aTuv;
#endif

	vTuv2 = aTuv2;

	// Transform the normal's orientation into eye space.    
	vec3 N = uMV3x3 * aNormal;
	vec3 T = uMV3x3 * aTangent;
	vec3 B = uMV3x3 * aBinormal;
	//build TBN matrix
	mat3 TBN = mat3(
			T[0],B[0],N[0],
			T[1],B[1],N[1],
			T[2],B[2],N[2]
			);
	tbnVectorToLight = TBN * uVectorToLight;
	if(uSpecularIntencity > 0.0){ //for glares
		vec4 vxPos = uMM * vec4(aPos, 1.0); //vertex position
		vec3 dirToCamera = normalize(uCameraPosition - vec3(vxPos));
		vec3 vHalfVector = normalize(dirToCamera + uVectorToLight);
		tbnHalfVector = TBN * vHalfVector;
	}
#if defined(MIRROR)
	vScreenPosition01[0] =  (gl_Position[0]/gl_Position[3])*0.1;
	vScreenPosition01[1] = -(gl_Position[1]/gl_Position[3])*0.1;
	inversedTBN = inverse(TBN);
#endif
#if defined(WITHSHADOWS)
	vec4 depthMapPosition = uMVP4dm * vec4(aPos, 1.0);
	//varying TUV for depth map (passed from vertex shader)
	/*
	vDMcoords.x = depthMapPosition.x / depthMapPosition.w * 0.5 + 0.5;
	vDMcoords.y = depthMapPosition.y / depthMapPosition.w * 0.5 + 0.5;
	vDMcoords.z = depthMapPosition.z;// / depthMapPosition.w;
	*/
	vDMcoords.x = depthMapPosition.x * 0.5 + 0.5;
	vDMcoords.y = depthMapPosition.y * 0.5 + 0.5;
	vDMcoords.z = depthMapPosition.z;
#endif

}

