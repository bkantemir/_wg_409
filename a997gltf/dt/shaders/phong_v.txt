//#version 320 es
precision lowp float;
uniform mat4 uMVP; // transform matrix (Model-View-Projection)
uniform mat3 uMV3x3; // Model-View matrix (for calculating normals into eye space)

layout (location = 0) in vec3 aPos; // position attribute (x,y,z)
#if defined(USE_NORMALS)
	layout (location = 3) in vec3 aNormal; // normal attribute (x,y,z)
	out vec3 vNormal; // varying normal (to pass to fragment shader)
#endif
#if defined(USE_TUV0)
	layout (location = 1) in vec2 aTuv; //attribute TUV (texture coordinates)
	out vec2 vTuv; //varying TUV (pass to fragment shader)
#endif
#if defined(MIRROR)
	out vec2 vTuvMirror; //varying TUV (pass to fragment shader)
#endif
#if defined(PHONG)
	uniform mat4 uMM; // Model matrix (for vHalfVector for glares)
	uniform vec3 uVectorToLight;
	uniform vec3 uCameraPosition; //for calculating half vector for glares
	uniform float uSpecularIntencity; //for calculating half vector for glares
	out vec3 vHalfVector;
#endif
#if defined(WITHSHADOWS)
	uniform mat4 uMVP4dm; // transform matrix (Model-View-Projection) for depth map
	out vec3 vDMcoords; //depth map coords
#endif


void main(void) { 
	gl_Position = uMVP * vec4(aPos, 1.0);
#if defined(USE_NORMALS)	
	// Transform the normal's orientation into eye space. 
	vNormal = uMV3x3 * aNormal;	
#endif
#if defined(USE_TUV0)
	vTuv = aTuv;
#endif
#if defined(MIRROR)
	vTuvMirror[0] =  (gl_Position[0]/gl_Position[3]*0.1+vNormal[0]*0.4)+0.5;
	vTuvMirror[1] = -(gl_Position[1]/gl_Position[3]*0.1+vNormal[1]*0.4)+0.5;
#endif
#if defined(PHONG)
	if(uSpecularIntencity > 0.0){ //for glares
		vec4 vxPos = uMM * vec4(aPos, 1.0); //vertex position
		vec3 dirToCamera = normalize(uCameraPosition - vec3(vxPos));
		vHalfVector = normalize(dirToCamera + uVectorToLight);
	}
#endif
#if defined(WITHSHADOWS)
	vec4 depthMapPosition = uMVP4dm * vec4(aPos, 1.0);
	//varying TUV for depth map (passed from vertex shader)
	vDMcoords.x = depthMapPosition.x * 0.5 + 0.5;
	vDMcoords.y = depthMapPosition.y * 0.5 + 0.5;
	vDMcoords.z = depthMapPosition.z;

#endif

}

